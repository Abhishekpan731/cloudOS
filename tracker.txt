CloudOS Development Tracker and Detailed Roadmap
Last Updated: 2025-09-20 20:17 IST

===============================================================================
0) Current Status Snapshot
===============================================================================
Build:
- Kernel compile: 35/35 SUCCESS (CloudFS CoW path fixed)
- Compiled size: ~248 KB

Tests:
- Total: 80
- Passed: 72
- Failed: 8
  - Monitoring: Alert Notifications; Log Levels; Log Rotation
  - Config: Service Dependencies; Hot Reload Support; Configuration Validation
  - Integration: File System + Security Integration; Network + Security Integration
- Performance (dev box): Compilation ~767 ms; FS throughput >2 GB/s (NVMe); TCP >1 Gbps

Blocking errors:
- None (P0 CloudFS compile errors resolved)

===============================================================================
1) Immediate Fixes (P0) — Completed
===============================================================================
[FS-P0-001] CloudFS CoW Write Path Compile Error — RESOLVED
- Changes:
  - kernel/fs/cloudfs.c:
    - Extended cloudfs_inode_t with:
      - uint32_t cow_flags; // CoW bitmap flags (mod 32)
      - uint64_t direct_blocks[12]; // simplified direct block mapping
    - Added CoW helpers:
      - static uint32_t cloudfs_allocate_block(void);
      - static uint8_t*  cloudfs_get_block(uint64_t block_num);
    - cloudfs_copy_on_write() now allocates a new block, copies data, updates direct_blocks, clears CoW bit.
  - Rebuilt OK; FS compile PASS.
- Acceptance Criteria:
  - 35/35 compile — PASS
  - FS tests: Extents, CoW, Compression, Journaling, B-Tree, VFS — PASS

Owner: FS/Core
Status: DONE

===============================================================================
2) High-Priority Functional Gaps (P1) — In Progress (ETA: 5–7 days)
===============================================================================
2.1 Monitoring: Alert Notifications + Logger Levels/Rotation (P1)
- Failures: Alert Notifications; Log Levels; Log Rotation
- Design:
  - Introduce a kernel logger (monitoring/logger):
    - log_level_t {DEBUG, INFO, WARN, ERROR, CRITICAL}
    - Ring buffer with rotation (bounded size)
    - APIs: logger_init(size), logger_log(level, module, fmt,...), logger_get_entries(out[], max)
  - Alerts:
    - monitoring_alert_notify(level, name, metric, value, threshold)
    - Ring buffer of last K alerts + getter monitoring_get_alerts()
  - Replace kprintf in monitoring_check_alerts() with logger + alert sink.
- Success: All three monitoring tests pass; memory usage bounded.

Owner: Monitoring
Effort: M (1–2 days)

2.2 Config: Validation + Hot Reload + Service Dependencies (P1)
- Failures: Service Dependencies; Hot Reload Support; Configuration Validation
- Design:
  A) Validation (config_validate_configuration()):
     - Check required keys/types (e.g., system.log_level ∈ {debug,info,warn,error}, dns_servers[] strings)
  B) Hot reload (config_reload_configuration()):
     - Parse → validate → key-level diff → apply to state; return summary
  C) Service dependencies:
     - Extend service_t with dependencies[]; implement topological start/stop; detect cycles
- Success: All three configuration tests pass; stable reload path.

Owner: Config
Effort: M+ (2–3 days)

2.3 Integration Hooks: FS+Security and Net+Security (P1)
- Failures: File System + Security Integration; Network + Security Integration
- Design:
  - Optional enforcement via config flag: security.enforce=true
  - VFS: call security_check_permission(...) on open/mount
  - Net: require capabilities (CAP_NET_RAW/CAP_NET_ADMIN) on socket/bind/connect where applicable
  - Default policy permissive; always audit (logger)
- Success: Both integration tests pass without breaking defaults.

Owner: Security / VFS / Net
Effort: M (1–2 days)

===============================================================================
3) Medium Priority Enhancements (P2) — Quality & Ops (ETA: 1–2 weeks)
===============================================================================
3.1 Central Kernel Logger (if not fully done in 2.1)
- Unify logging; migrate from kprintf in critical paths to logger API.

3.2 Documentation & Collateral
- Add SUPPORT.md (help channels)
- Add CHANGELOG.md and start version entries
- docs/benchmarks.md (steps to reproduce compile time & FS/Net performance)
- Export architecture images from design/high-level/architecture/*.drawio to docs/images and embed in README

3.3 CI/CD and Releases
- .github/workflows/build.yml: run ./test_compile.sh and ./tests/test_all.sh
- On tag: scripts/release.sh → ISO & container artifacts; update CHANGELOG

===============================================================================
4) Long-Term Roadmap (Phase 1.3, 2.x, 3.x)
===============================================================================
4.1 Container Runtime (Phase 1.3)
- OCI runtime shim/integration; namespaces, cgroups hooks
- CNI networking and basic policy; volume management with CloudFS snapshots

4.2 AI Integration (Phase 2.x)
- Userspace AI agent consuming kernel metrics for predictive scaling and anomaly detection
- Feedback loop to orchestrator; cost/performance optimizers

4.3 Cloud-Native Ops (Phase 3.x)
- Kubernetes-optimized integration; multi-cluster federation
- Service mesh policy/mTLS; automation for cost and performance

===============================================================================
5) Work Items — Detailed Backlog (with AC, tests, owners)
===============================================================================
[MON-P1-001] Alert sink and logger (levels + rotation)
- Files: kernel/monitoring/monitoring.c (+ optional logger.c/h)
- AC: Alert Notifications, Log Levels, Log Rotation — PASS
- Tests: ./tests/test_all.sh (Monitoring)
- Owner: Monitoring
- Effort: M

[CFG-P1-001] Configuration validation
- Files: kernel/config/config.c (+ headers)
- AC: config_validate_configuration() returns 0 for good config; error otherwise
- Tests: ./tests/test_all.sh (Configuration Validation)
- Owner: Config
- Effort: S–M

[CFG-P1-002] Hot reload skeleton with diff & apply
- Files: kernel/config/config.c
- AC: config_reload_configuration() updates state and returns summary
- Tests: ./tests/test_all.sh (Hot Reload Support)
- Owner: Config
- Effort: M

[SRV-P1-003] Service dependency graph & topological start/stop
- Files: kernel/config/config.c (+ service_t changes)
- AC: Service Dependencies test — PASS; cycles detected & reported
- Tests: ./tests/test_all.sh (Service Dependencies)
- Owner: Config
- Effort: M

[SEC-P1-004] Optional security hooks in VFS and Net (enforce flag)
- Files: kernel/fs/vfs.c, kernel/net/net_core.c (or socket paths), kernel/security/security.c
- AC: FS+Security and Net+Security Integration — PASS; default permissive with audit
- Tests: ./tests/test_all.sh (Integration)
- Owner: Security
- Effort: M

[DOC-P2-001] Docs & collateral
- Files: SUPPORT.md, CHANGELOG.md, docs/benchmarks.md, README images
- AC: Documents exist; linked in README; perf steps reproducible
- Owner: Docs
- Effort: S

[CI-P2-002] CI pipeline & release artifacts
- Files: .github/workflows/build.yml, scripts/release.sh
- AC: CI runs tests; tags publish artifacts; CHANGELOG updated
- Owner: DevOps
- Effort: S–M

===============================================================================
6) Risks and Mitigations
===============================================================================
- Monitoring buffers: must be bounded; prefer fixed-size ring buffers
- Config reload: validate first; apply atomically; rollback on error
- Security hook perf: guard behind config flag; fast-path for permissive mode
- FS consistency: keep CoW change minimal; rely on journaling stubs

===============================================================================
7) Validation Matrix (mapping fails → tasks)
===============================================================================
- Alert Notifications → [MON-P1-001]
- Log Levels → [MON-P1-001]
- Log Rotation → [MON-P1-001]
- Service Dependencies → [SRV-P1-003]
- Hot Reload Support → [CFG-P1-002]
- Configuration Validation → [CFG-P1-001]
- FS + Security Integration → [SEC-P1-004]
- Net + Security Integration → [SEC-P1-004]

===============================================================================
8) Execution Plan (Next 7 days)
===============================================================================
Day 1–2:
- Implement logger/alert sink; wire monitoring_check_alerts(); update tests.

Day 3–4:
- Implement config_validate_configuration() and config_reload_configuration().

Day 4–5:
- Implement service dependency DAG; topo start/stop; cycle detection.

Day 6–7:
- Add optional security hooks to VFS & Net (config.security.enforce); log/audit.

===============================================================================
9) Git Push & Release Checklist
===============================================================================
- git add -A
- git commit -m "fs: add CoW metadata + allocator; monitoring/config/security tasks scaffolding; tracker update"
- git push origin HEAD
- Tag when P1 complete:
  - ./scripts/release.sh v0.1.0
  - Publish ISO/images; update CHANGELOG

===============================================================================
10) Owner Map (initial)
===============================================================================
- FS/Core: [assign]
- Monitoring/Logger: [assign]
- Config/Services: [assign]
- Security/Integration: [assign]
- Docs/Release/CI: [assign]

===============================================================================
11) Notes
===============================================================================
- Crypto primitives remain scaffolds; production systems must use vetted libraries.
- README contains both technical and marketing sections; keep it focused.
- Update this tracker daily; it is the authoritative plan.
