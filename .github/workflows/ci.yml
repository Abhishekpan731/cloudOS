name: CloudOS CI/CD Pipeline

on:
  push:
    branches: [ main, abhi_dev, develop ]
  pull_request:
    branches: [ main, abhi_dev ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pylint bandit safety
        if [ -f ai/requirements.txt ]; then pip install -r ai/requirements.txt; fi

    - name: Run Black (Python formatter)
      run: |
        black --check --diff ai/ || echo "Black formatting issues found"

    - name: Run Flake8 (Python linter)
      run: |
        flake8 ai/ --max-line-length=100 --ignore=E203,W503 || echo "Flake8 issues found"

    - name: Run MyPy (Type checker)
      run: |
        mypy ai/ --ignore-missing-imports || echo "MyPy type issues found"

    - name: Run Pylint
      run: |
        pylint ai/ --disable=C0114,C0116,C0115,R0903 || echo "Pylint issues found"

    - name: Run Bandit (Security scanner)
      run: |
        bandit -r ai/ -f json -o bandit-report.json || echo "Security issues found"

    - name: Run Safety (Dependency scanner)
      run: |
        safety check || echo "Dependency vulnerabilities found"

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  kernel-build:
    name: Kernel Build Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    strategy:
      matrix:
        compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          nasm \
          clang \
          libc6-dev \
          qemu-system-x86 \
          grub-pc-bin \
          grub-efi-amd64-bin \
          xorriso \
          mtools

    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          build/
          .cache/
        key: ${{ runner.os }}-build-${{ matrix.compiler }}-${{ hashFiles('kernel/**', 'Makefile') }}

    - name: Build kernel with GCC
      if: matrix.compiler == 'gcc'
      run: |
        make clean
        make kernel VERBOSE=1

    - name: Build kernel with Clang
      if: matrix.compiler == 'clang'
      run: |
        make clean
        CC=clang make kernel VERBOSE=1

    - name: Run kernel unit tests
      run: |
        make test-unit || echo "Unit tests completed with issues"

    - name: Build ISO image
      run: |
        make iso

    - name: Test ISO boot in QEMU
      run: |
        timeout 30s qemu-system-x86_64 \
          -cdrom build/cloudos.iso \
          -m 256M \
          -nographic \
          -serial stdio \
          -no-reboot || echo "QEMU test completed"

    - name: Upload kernel artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kernel-${{ matrix.compiler }}
        path: |
          build/kernel.bin
          build/cloudos.iso
        retention-days: 7

  ai-engine-tests:
    name: AI Engine Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install AI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio httpx
        pip install numpy scikit-learn pandas
        pip install fastapi uvicorn
        # Install optional ML frameworks for testing
        pip install torch --index-url https://download.pytorch.org/whl/cpu || echo "PyTorch install failed"
        pip install tensorflow-cpu || echo "TensorFlow install failed"

    - name: Run AI Engine unit tests
      run: |
        cd ai/
        python -m pytest tests/ -v --cov=engine --cov-report=xml --cov-report=html

    - name: Test AI Engine startup
      run: |
        cd ai/engine/core/
        timeout 30s python ai_engine.py || echo "AI Engine test completed"

    - name: Test Inference API
      run: |
        cd ai/core/
        timeout 30s python inference_api.py || echo "Inference API test completed"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ai/coverage.xml
        flags: ai-engine
        name: ai-engine-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [kernel-build, ai-engine-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cloudos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio docker-compose
        pip install psycopg2-binary redis
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi

    - name: Set up Docker Compose
      run: |
        docker-compose -f dev/docker-compose.test.yml up -d

    - name: Wait for services
      run: |
        sleep 30
        docker-compose -f dev/docker-compose.test.yml ps

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cloudos_test
        REDIS_URL: redis://localhost:6379

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f dev/docker-compose.test.yml down

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  container-build:
    name: Container Build and Test
    runs-on: ubuntu-latest
    needs: [ai-engine-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build AI Engine image
      uses: docker/build-push-action@v5
      with:
        context: ./ai
        file: ./ai/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test container startup
      run: |
        docker run --rm -d --name cloudos-ai-test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "Container test failed"
        sleep 10
        docker logs cloudos-ai-test || echo "No logs available"
        docker stop cloudos-ai-test || echo "Container already stopped"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [ai-engine-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark locust
        pip install -r ai/requirements.txt || echo "No requirements.txt found"

    - name: Run performance benchmarks
      run: |
        cd ai/
        python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

    - name: Run load tests
      run: |
        cd tests/load/
        locust -f ai_load_test.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000 || echo "Load test completed"

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          ai/benchmark.json
          tests/load/results/

  deployment-test:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, container-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/abhi_dev'

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: cloudos-test

    - name: Test Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f k8s/ || echo "Kubernetes manifest validation completed"

    - name: Test Helm chart
      run: |
        helm lint helm/cloudos || echo "Helm chart linting completed"
        helm template helm/cloudos --debug || echo "Helm template rendering completed"

    - name: Deploy to test cluster
      run: |
        helm install cloudos-test helm/cloudos --wait --timeout=300s || echo "Deployment test completed"

    - name: Run smoke tests
      run: |
        kubectl get pods -A
        kubectl wait --for=condition=ready pod -l app=cloudos --timeout=300s || echo "Smoke test completed"

  trigger-release:
    name: Trigger Release Workflow
    runs-on: ubuntu-latest
    needs: [deployment-test, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate version tag
      id: version
      run: |
        # Generate semantic version based on commit count and date
        VERSION="v1.0.$(git rev-list --count HEAD)"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.version.outputs.version }}" -m "Automated release ${{ steps.version.outputs.version }}"
        git push origin "${{ steps.version.outputs.version }}"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [trigger-release]
    if: always()

    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          const oldArtifacts = artifacts.data.artifacts.filter(artifact => {
            const created = new Date(artifact.created_at);
            const now = new Date();
            const daysDiff = (now - created) / (1000 * 60 * 60 * 24);
            return daysDiff > 7;
          });

          for (const artifact of oldArtifacts) {
            console.log(`Deleting artifact: ${artifact.name}`);
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, kernel-build, ai-engine-tests, integration-tests, security-scan]
    if: always()

    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.kernel-build.result }}" == "success" && \
              "${{ needs.ai-engine-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All critical CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "  Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "  Kernel Build: ${{ needs.kernel-build.result }}"
          echo "  AI Engine Tests: ${{ needs.ai-engine-tests.result }}"
          echo "  Integration Tests: ${{ needs.integration-tests.result }}"
          echo "  Security Scan: ${{ needs.security-scan.result }}"
          exit 1
        fi